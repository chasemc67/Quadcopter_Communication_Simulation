object oriented. make a class for each node.
Each node needs it's location, and a move function

Keep a priority queue sorted by next event. 
Each event should be a class, 
Holds time until event, and reference objects in event
After event, invalidate all events relating to the two objects
Find all new events for 2 objects, and add to queue

Make a statistics object (or just keep as counters in environment)
Keep track of average "talking" time. 




Check for interesting "thick" lines but splitting each "thick" line into 2 parrallel lines, and check for intersection between the two pairs of lines




toDo:
[ ] Fix off-by-one error in hitting walls
[ ] Make nodes "bounce" off walls
[ ] Change line intersections to "fat intersections"
[ ] Make nodes change color when within range of eachother
[ ] Switch event list to priority queue
[ ] Switch eventList appender to interate over node list 