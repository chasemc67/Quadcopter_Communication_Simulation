object oriented. make a class for each node.
Each node needs it's location, and a move function

Keep a priority queue sorted by next event. 
Each event should be a class, 
Holds time until event, and reference objects in event
After event, invalidate all events relating to the two objects
Find all new events for 2 objects, and add to queue

Make a statistics object (or just keep as counters in environment)
Keep track of average "talking" time. 




Check for interesting "thick" lines but splitting each "thick" line into 2 parrallel lines, and check for intersection between the two pairs of lines




toDo:
[+] Switch event list to priority queue
[+] Sort queue by Event attribute, not tuple
[+] Make nodes "bounce" off walls
[+] Skip to events
[+] Fix timing of events being pushed onto queue. Specifically wall events getting stuck
[ ] Fix bug where nodes should always be in radius
[ ] Check that events are working properly
[ ] Handle simultaneous events
[ ] Create object to keep track of communication intervals
[ ] Plot with python 



issue appears to be with handling exit events. 